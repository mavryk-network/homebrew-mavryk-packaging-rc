# SPDX-FileCopyrightText: 2019-2020 TQ Tezos <https://tqtezos.com/>
#
# SPDX-License-Identifier: LicenseRef-MIT-TQ

env:
  SET_VERSION: "export MAVRYK_VERSION=\"$(cat nix/nix/sources.json | jq -r '.tezos.ref' | cut -d'/' -f3)\""

steps:
 - label: reuse lint
   command: nix run -f . pkgs.reuse -c reuse lint
 - label: check trailing whitespace
   command: .buildkite/check-trailing-whitespace.sh
 - label: crossref-verify
   command: "nix run -f https://github.com/serokell/crossref-verifier/archive/68a1f9d25b6e7835fea8299b18a3e6c61dbb2a5c.tar.gz -c crossref-verify"
   soft_fail: true

 - label: build via nix
   commands:
   - nix-build ./nix -A binaries -o binaries
   branches: "!master"
 - label: test nix-built binaries
   commands:
   - nix-build tests/mavryk-nix-binaries.nix --no-out-link
   branches: "!master"

 - label: build via docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   - nix run -f.. pkgs.upx -c upx mavryk-*
   artifact_paths:
     - ./docker/mavryk-*
   agents:
     queue: "docker"
 # arm builer is an ubuntu machine without nix
 - label: build arm via docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   - upx mavryk-*
   - >
     for f in ./mavryk-*; do
       mv "\$f" "\$f-arm64"
     done
   artifact_paths:
     - ./docker/mavryk-*
   agents:
     queue: "arm64-build"

 - label: check brew formulas
   commands:
     # Check all formulas except 'tezos.rb' because it's a base class for all other formulas
     - find ./Formula -type f -name "*.rb" -exec ruby -c {} +
     # All formulas share the same source URL inherited by the Mavryk class, so it's fine
     # to fetch sources for only one formula
     - brew fetch -s ./Formula/mavryk-client.rb
   agents:
     queue: "x86_64-darwin"

 # binaries built by docker are tested on the another machine,
 # so we should wait for docker build to finish
 - wait
 - label: test docker-built binaries
   commands:
   - buildkite-agent artifact download "docker/*" . --step "build via docker"
   - chmod +x ./docker/*
   - nix-build tests/mavryk-binaries.nix --no-out-link --arg path-to-binaries ./docker
   branches: "!master"

 - label: test deb source packages via docker
   commands:
   - eval "$SET_VERSION"
   - ./docker/docker-mavryk-packages.sh --os ubuntu --type source
   artifact_paths:
     - ./out/*
   branches: "!master"
   timeout_in_minutes: 30
   agents:
     queue: "docker"
 - label: test deb binary packages via docker
   commands:
   - eval "$SET_VERSION"
   # Building all binary packages will take significant amount of time, so we build only one
   # in order to ensure package generation sanity
   - ./docker/docker-mavryk-packages.sh --os ubuntu --type binary --package mavryk-baker-008-PtEdo2Zk
   - rm -rf out
   # It takes much time to build binary package, so we do it only on master
   branches: "master"
   timeout_in_minutes: 90
   agents:
     queue: "docker"
 - label: test rpm source packages via docker
   commands:
   - eval "$SET_VERSION"
   - ./docker/docker-mavryk-packages.sh --os fedora --type source
   artifact_paths:
     - ./out/*
   branches: "!master"
   timeout_in_minutes: 30
   agents:
     queue: "docker"
 - label: test rpm binary packages via docker
   commands:
   - eval "$SET_VERSION"
   # Building all binary packages will take significant amount of time, so we build only one
   # in order to ensure package generation sanity
   - ./docker/docker-mavryk-packages.sh --os fedora --type binary --package mavryk-baker-008-PtEdo2Zk
   - rm -rf out
   # It takes much time to build binary package, so we do it only on master
   branches: "master"
   timeout_in_minutes: 90
   agents:
     queue: "docker"

 - wait
 - label: create auto pre-release
   commands:
   - mkdir binaries
   - mkdir arm-binaries
   - buildkite-agent artifact download "docker/*" binaries --step "build via docker"
   - buildkite-agent artifact download "docker/*" arm-binaries --step "build arm via docker"
   - ls binaries
   - ./scripts/autorelease.sh
   branches: master
